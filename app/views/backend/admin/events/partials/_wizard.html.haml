-#%form#rootwizard-2.form-wizard.validate{:action => "", :method => "post"}
- url = @event.new_record? ? admin_events_path : admin_event_path(@event)
-#= form_for([:admin ,customer ] , remote: true, html: {class: 'ajax' ,role: :form, 'data-model': 'customer'}) do |form|

= simple_form_for [:admin , @event] , as: :event , url: url , method: (@event.new_record? ? :post : :patch)  , html: { class: 'form-wizard validate ajax' ,  'data-model': 'event'} , remote: true do |f|
  = f.hidden_field :type , value: "Job"
  .steps-progress
    .progress-indicator
  %ul
    %li.active
      %a{"data-toggle" => "tab", :href => "#tab2-1"}
        %span> 1
        Job
    %li
      %a{"data-toggle" => "tab", :href => "#tab2-2"}
        %span> 2
        Customer
    %li
      %a{"data-toggle" => "tab", :href => "#tab2-3"}
        %span> 3
        Employee
    %li
      %a{"data-toggle" => "tab", :href => "#tab2-4"}
        %span> 4
        Recurrence
    %li
      %a{"data-toggle" => "tab", :href => "#tab2-5"}
        %span> 5
        Cost Item
  .tab-content
    #tab2-1.tab-pane.active
      .row
        .col-md-12
          .form-group.required
            %label.control-label{:for => "full_name"}
              Job Title
            =f.text_field :title , class: 'form-control' , placeholder: 'Job Title' , required: true , data: {"validate": "required" , "message-required": "can't be blank."}
            %span.help-block
      .row
        .col-md-6
          .form-group
            %label.control-label{:for => "Status"} Status
            = f.select :status, options_for_select(Event.statuses.collect { |s| [s[0].humanize, s[0]] }), {} , class: "form-control"
        .col-md-6
          .form-group
            %label.control-label{:for => "Priority"} Priority
            = f.select :priority, options_for_select(Event.priorities.collect { |s| [s[0].humanize, s[0]] }), {} , class: "form-control"
      .row
        .col-md-12
          .form-group
            %label.control-label{:for => "about"} Write Something About Job
            =f.text_area :description , class: 'form-control autogrow' , rows: "5" ,placeholder: 'Job Description' , style: "overflow: hidden; word-wrap: break-word; resize: horizontal; height: 99px;"
      -#- if not @event.new_record?
        .row
          .col-md-12
            .form-group
              .checkbox.checkbox-replace.neon-cb-replacement
              = f.check_box :is_parent_update
              -#%input#chk-rules{"data-message-message" => "You must accept rules in order to complete this registration.", "data-validate" => "required", :name => "chk-rules", :type => "checkbox"}/
              -#.checked
              %label{:for => "chk-rules"} Apply change to all future events.

    #tab2-2.tab-pane
      .row
        .col-md-12
          .form-group.required
            %label.control-label{:for => "customer"}
              Cutomer
            = f.select :customer_id, Customer.all.collect { |s| [s.first_name, s.id] } , {prompt: 'Select Customer(s)'} , class: "form-control" , required: true ,  data: {"validate": "required" , "message-required": "This is custom message for required field."}
      .row
        .col-md-8
          .form-group
            %label.control-label{:for => "street"}
              Street
            =f.text_field :street , class: 'form-control' , placeholder: 'Enter your street address'
        .col-md-4
          .form-group
            %label.control-label{:for => "door_no"}
              Contact
            =f.text_field :contact , class: 'form-control' , placeholder: 'Contact number'
      .row
        .col-md-12
          .form-group
            %label.control-label{:for => "address_line_2"} Address Line 2
            =f.text_field :address_line , class: 'form-control' , placeholder: '(Optional) Secondary Address'
      .row
        .col-md-9
          .form-group
            %label.control-label{:for => "city"} City
            =f.text_field :city , class: 'form-control' , placeholder: 'Current City'
        .col-md-3
          .form-group
            %label.control-label{:for => "zip"} Zip
            =f.text_field :zip , class: 'form-control' , placeholder: 'Zip Code'
    #tab2-3.tab-pane
      .row
        .col-md-12
          .form-group.required
            %label.control-label{:for => "full_name"}
              Assigned To
            = f.select :employee_id, Employee.all.collect { |s| [s.full_name, s.id] }, {prompt: 'Select Employee(s)'} , class: "form-control" , required: true , data: {"validate": "required" , "message-required": "can't be blank."}
    #tab2-4.tab-pane
      .row
        .col-md-12
          .form-group
            %label.control-label{:for => "Priority"} Job Duration
        .col-md-3
          .form-group
            = f.number_field :job_duration , class: "form-control"
        .col-md-4
          .form-group
            = f.select :job_duration_type, Event.job_duration_types.collect { |s| [s[0].humanize, s[0]] }, {} , class: "form-control"
      %hr
      .row
        .col-md-12
          .form-group.required
            %label.control-label{:for => "full_name"}
              Start
            = f.text_field :start, class: 'form-control input-sm start_date' , label: false , required: true
      .row
        .col-md-12
          .form-group.required
            %label.control-label{:for => "full_name"}
              End
            = f.text_field :end, class: 'form-control input-sm end_date' , label: false
      %hr
      .row{class: "#{(@event.new_record? || (!@event.recurring? || !@event.parent_id.nil? || !@event.children.nil?  ? 'hidden' : ''))}"}
        .col-md-12
          .form-group
            %label.control-label{:for => "Recurrence"} Recurrence
            = f.select_recurring :recurring , nil,allow_blank: true  , data: {"validate": "required" , "message-required": "This is custom message for required field."} , html: {class: "form-control" }
      .row.end_recurrence{class: "#{(@event.new_record? || (!@event.recurring? || !@event.parent_id.nil? || !@event.children.nil?  ? 'hidden' : ''))}"}
        .col-md-12
          .form-group
            %label.control-label{:for => "End Recurrence"} End Recurrence
            = f.select :recurring_type, options_for_select(Event.recurring_types.collect { |s| [s[0].humanize, s[0]] }), {} , class: "form-control"
        .col-md-8.recurring_end_time.hidden
          .form-group
            %label.control-label{:for => "End Recurrence"}
              = f.number_field :recurring_end_time , class: 'form-control' , required: true , placeholder: "time(s)"
              time(s)
        .col-md-12.recurring_end_at.hidden
          .form-group
            %label.control-label{:for => "End Recurrence"}
            = f.text_field :recurring_end_at, class: 'form-control input-sm datetimepicker' , label: false
    #tab2-5.tab-pane
      .row
        .col-md-12
          .form-group
            %label.control-label{:for => "Recurrence"} Cost Type
            = f.select :cost_type, options_for_select(Event.cost_types.collect { |s| [s[0].humanize, s[0]] }), {} , class: "form-control"

      .row
        .col-md-12
          .form-group.required
            %label.control-label{:for => "Recurrence"} Cost
            =f.number_field :total_cost , class: 'form-control' , placeholder: "#{amount_in_currency 0.0}"
      .form-group
        %button.btn.btn-primary{:type => "submit"} Finish Registration
    %ul.pager.wizard
      %li.previous
        %a{:href => "#"}
          %i.entypo-left-open
          Previous
      %li.next
        %a{:href => "#"}
          Next
          %i.entypo-right-open
:javascript
  $('#event_job_duration').on('change',function(){
    setEventEndDateTime();
  });
  $('#event_job_duration_type').on('change',function(){
    setEventEndDateTime();
  });
  $('#event_recurring').on('change',function(){
    if($('#event_recurring').val() == "null"){
    $('.end_recurrence').addClass('hidden');
    }else{
      $('.end_recurrence').removeClass('hidden');
    }
  });
  $('#event_recurring_type').on('change',function(){
    if($('#event_recurring_type').val() == "never"){
      $('#event_recurring_end_time').val(0);
      $('.recurring_end_time').addClass('hidden');
      $('.recurring_end_at').addClass('hidden');
    }else if($('#event_recurring_type').val() == "after"){
      $('.recurring_end_time').removeClass('hidden');
      $('.recurring_end_at').addClass('hidden');
    }else if($('#event_recurring_type').val() == "on_date"){
      $('#event_recurring_end_time').val(0);
      $('.recurring_end_time').addClass('hidden');
      $('.recurring_end_at').removeClass('hidden');
    }
  });
